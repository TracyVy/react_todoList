{"version":3,"sources":["utils/GlobalState.js","components/Form.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoContext","createContext","Provider","reducer","state","action","type","id","length","Math","random","name","filter","_","index","map","item","priority","TodoProvider","props","useReducer","dispatch","value","useTodoContext","useContext","Form","inputRef","useRef","className","onSubmit","e","preventDefault","console","log","current","ref","placeholder","TodoList","key","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yNAEMA,EAAcC,wBAAc,IAE1BC,EAAaF,EAAbE,SAER,SAASC,EAAQC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,MACH,MAAM,GAAN,mBACKF,GADL,CAEE,CACEG,GAAIH,EAAMI,OAASC,KAAKC,SACxBC,KAAMN,EAAOM,QAGnB,IAAK,SACH,OAAOP,EAAMQ,QAAO,SAACC,EAAGC,GACtB,OAAOA,IAAUT,EAAOS,SAE5B,IAAK,aACH,OAAOV,EAAMW,KAAI,SAACC,EAAMF,GACtB,OAAIA,IAAUT,EAAOS,MACZ,2BAAKE,GAAZ,IAAkBC,UAAWD,EAAKC,WAE7BD,KAEX,QACE,OAAOZ,GAIb,SAASc,EAAT,GAAqC,IAAVC,EAAS,sBACRC,qBAAWjB,EAAS,IADZ,mBAC3BC,EAD2B,KACpBiB,EADoB,KAElC,OAAO,kBAACnB,EAAD,eAAUoB,MAAO,CAAClB,EAAOiB,IAAeF,IAGjD,SAASI,IACP,OAAOC,qBAAWxB,GCnCpB,IA8BeyB,EA9BF,WACX,IAAMC,EAAWC,mBADA,EAGKJ,IAHL,mBAGPF,GAHO,WAajB,OACE,6BACE,4CACA,0BAAMO,UAAU,kBAAkBC,SAXtC,SAAsBC,GACpBA,EAAEC,iBACFC,QAAQC,IAAIP,EAASQ,QAAQZ,OAE7BD,EAAS,CAAEf,KAAM,MAAOK,KAAMe,EAASQ,QAAQZ,QAC/CI,EAASQ,QAAQZ,MAAQ,KAOrB,2BACEa,IAAKT,EACLE,UAAU,eACVQ,YAAY,iBAEd,4BAAQR,UAAU,uBAAuBtB,KAAK,UAA9C,iBCYO+B,EAlCE,WAAO,IAAD,EACKd,IADL,mBACdnB,EADc,KACPiB,EADO,KAGrB,OACE,6BACE,2CACA,wBAAIO,UAAU,cACXxB,EAAMW,KAAI,SAACC,EAAMF,GAAP,OACT,wBAAIc,UAAU,kBAAkBU,IAAKxB,GACnC,4BACEc,UAAU,uBACVW,QAAS,kBAAMlB,EAAS,CAAEf,KAAM,aAAcQ,YAE7C,IAJH,cAOA,4BACEc,UAAU,sBACVW,QAAS,kBAAMlB,EAAS,CAAEf,KAAM,SAAUQ,YAEzC,IAJH,UAQA,0BAAMc,UAAWZ,EAAKC,SAAW,mBAAqB,IACnDD,EAAKL,aCXL6B,MAXf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAACV,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCYuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,a","file":"static/js/main.3c64cb26.chunk.js","sourcesContent":["import React, { createContext, useReducer, useContext } from \"react\";\n\nconst TodoContext = createContext({});\n\nconst { Provider } = TodoContext;\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"add\":\n      return [\n        ...state,\n        {\n          id: state.length * Math.random(),\n          name: action.name,\n        },\n      ];\n    case \"remove\":\n      return state.filter((_, index) => {\n        return index !== action.index;\n      });\n    case \"prioritize\":\n      return state.map((item, index) => {\n        if (index === action.index) {\n          return { ...item, priority: !item.priority };\n        }\n        return item;\n      });\n    default:\n      return state;\n  }\n}\n\nfunction TodoProvider({ ...props }) {\n  const [state, dispatch] = useReducer(reducer, []);\n  return <Provider value={[state, dispatch]} {...props} />;\n}\n\nfunction useTodoContext() {\n  return useContext(TodoContext);\n}\n\nexport { TodoProvider, useTodoContext };\n","import React, { useRef } from \"react\";\nimport { useTodoContext } from \"../utils/GlobalState.js\";\n\nconst Form = () => {\n  const inputRef = useRef();\n  // eslint-disable-next-line\n  const [_, dispatch] = useTodoContext();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    console.log(inputRef.current.value);\n\n    dispatch({ type: \"add\", name: inputRef.current.value });\n    inputRef.current.value = \"\";\n  }\n\n  return (\n    <div>\n      <h1>Enter a Todo</h1>\n      <form className=\"form-group mt-3\" onSubmit={handleSubmit}>\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          placeholder=\"Enter a todo\"\n        />\n        <button className=\"btn btn-primary mt-3\" type=\"submit\">\n          Add a Todo\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\nimport { useTodoContext } from \"../utils/GlobalState\";\n\nconst TodoList = () => {\n  const [state, dispatch] = useTodoContext();\n\n  return (\n    <div>\n      <h4>Todo list :</h4>\n      <ul className=\"list-group\">\n        {state.map((item, index) => (\n          <li className=\"list-group-item\" key={index}>\n            <button\n              className=\"btn btn-warning mr-3\"\n              onClick={() => dispatch({ type: \"prioritize\", index })}\n            >\n              {\" \"}\n              Prioritize\n            </button>\n            <button\n              className=\"btn btn-danger mr-3\"\n              onClick={() => dispatch({ type: \"remove\", index })}\n            >\n              {\" \"}\n              Delete\n            </button>\n\n            <span className={item.priority ? \"font-weight-bold\" : \"\"}>\n              {item.name}\n            </span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default TodoList;\n","import React from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/Form\";\nimport TodoList from \"./components/TodoList.js\";\nimport { TodoProvider } from \"./utils/GlobalState\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoProvider>\n        <Form />\n        <TodoList />\n      </TodoProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}